CMPUT 379, Assignment 2, Log Format
Your server must log successful and failed requests in a specific format.

A request is successful when the client asks for a file, the file is found and successfully written in it's entirety to the socket that the client is connected on.

Anything else happening is an error.

For each request, the time of the request must be recorded as it is completed (successfully or not), as well as what happened, this can be "200 OK BYTES_WRITTEN/TOTAL_BYTES" for a file send, or the HTTP error code for other errors. Note that this means that if the client disconnects before the entire file can be written out on the socket, BYTES_WRITTEN may be less that TOTAL_BYTES which would be the size of the file.

Log format must be:


Date[tab]Client IP address[tab]request line[tab]response code
Note that [tab] is the ASCII character whose value is 9. So the log must look like this, with the correct current date


Tue 05 Nov 2013 19:18:34 GMT    127.0.0.1    GET /testDocument.txt HTTP/1.1    404 Not Found
Tue 05 Nov 2013 19:18:34 GMT    127.0.0.1    GET /favicon.ico HTTP/1.1    404 Not Found
Tue 05 Nov 2013 19:18:34 GMT    127.0.0.1    GET /favicon.ico HTTP/1.1    404 Not Found
Tue 05 Nov 2013 19:19:59 GMT    127.0.0.1    GET /testPermission.txt HTTP/1.1    200 OK 53/53
Tue 05 Nov 2013 19:20:30 GMT    127.0.0.1    GET /testPermission.txt HTTP/1.1    200 OK 53/53
Tue 05 Nov 2013 19:21:09 GMT    127.0.0.1    GET /testDocument.txt HTTP/1.1    200 OK 22/22
Tue 05 Nov 2013 19:21:20 GMT    127.0.0.1    GET /testDocument.txt HTTP/1.1    200 OK 22/22
Tue 05 Nov 2013 19:21:27 GMT    127.0.0.1    GET /largefile.txt HTTP/1.1    200 OK 8478/8478


/*
 * I should handle and return the following response codes
 * 200 OK
 * HTTP/1.1 200 OK
 * Date: Mon 21 Jan 2008 18:06:16 GMT
 * Content-Type: text/html
 * Content-Length: 1234
 *
 * This is the contents of file.html
 * it would continue for exactly 1234 bytes
 * 
 * 400 Bad Request
 * If the server receives a request it does not understand (Anything not a GET request, or not ending in " HTTP/1.1") It must return a BAD REQUEST error, which can look exactly like this:
 *
 * HTTP/1.1 400 Bad Request
 * Date: Mon 21 Jan 2008 18:06:16 GMT
 * Content-Type: text/html
 * Content-Length: 107
 *
 * <html><body>
 * <h2>Malformed Request</h2>
 * Your browser sent a request I could not understand.
 * </body></html>
 *
 * 404 not found
 * If the server receives a request for a file that does exist, it must return a Not Found error - which can look exactly like this:
 *
 * HTTP/1.1 404 Not Found
 * Date: Mon 21 Jan 2008 18:06:16 GMT
 * Content-Type: text/html
 * Content-Length: 117
 *
 * <html><body>
 * <h2>Document not found</h2>
 * You asked for a document that doesn't exist. That is so sad.
 * </body></html>
 *
 * 403 forbidden
 * If the server receives a request for a file that is not permitted to be read, it must return a Forbidden error - which can look exactly like this:
 *
 * HTTP/1.1 403 Forbidden
 * Date: Mon 21 Jan 2008 18:06:16 GMT
 * Content-Type: text/html
 * Content-Length: 130
 *
 * <html><body>
 * <h2>Permission Denied</h2>
 * You asked for a document you are not permitted to see. It sucks to be you.
 * </body></html>
 *
 * 500 Internal server error
 * If the server has some sort of unplanned error while servicing a request, it must attempt to return a Server Error message - which can look exactly like this:
 *
 * HTTP/1.1 500 Internal Server Error
 * Date: Mon 21 Jan 2008 18:06:16 GMT
* Content-Type: text/html
* Content-Length: 131
*
* <html><body>
* <h2>Oops. That Didn't work</h2>
* I had some sort of problem dealing with your request. Sorry, I'm lame.
* </body></html>
*  
*/

