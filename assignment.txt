Assignment 2: Servers
CMPUT 379,  Assignment 2, Winter 2014
Due Friday, March 7 (submit by 6:00 pm)
(threads & processes, IPC, sockets, synchronization)
Objective
For this assignment you will implement a small simplified web server which implements a minimal subset of the HTTP 1.1 protocol. Your task is to both implement this web server, in three different ways, and to discuss some comparisons of your implementation. This assignment will expose you to many issues related to writing daemons and network servers.

The web server is started with three command line arguments - the first is the TCP port it will listen for, and accept connections on for service. The second is a directory in which the server serves up documents from the third is a log file in which the server logs all transactions with all clients.

The Web Servers

You must implement three servers. server_f, server_p, and server_s. Each server is invoked in exactly the same way. An example invocation:


server_f 8000 /some/where/documents /some/where/logfile
would invoke server_f listening on the local machine on port 8000, serving up documents from the directory /some/where/documents, and logging transactions to /some/where/logfile

Servers must properly daemonize on startup.
The servers should place no limit on the size of file they can send to the client.
If the supplied command-line argument is not a valid directory, then print an error and exit.
server_f must be implemented using processes and fork(). That is, server_f must fork a child process to service each request it gets from the network.
server_p must be implemented using pthreads. In server_p each request from the network must be serviced in a different posix thread.
server_s must be implemented in one process without using threads and without forking a child for each request it gets from the network. Instead, server_s should use poll() or select() keeping track of the state of each connection to handle all the network requests in one process.
The servers all accept and respond to client requests as documented here. 

The server logs all connections to themselves as documented here. Even if the client disconnects before you can serve them the response, you should still log the request.

As extra hints/notes:

You should change the date in the output headers to current time in GMT; look into strftime and gmtime, with print conversion '%c'. 
To properly recognize blank lines, you should pay attention to both '\n' and '\r\n'.
You can test using a browser with url: http://localhost:9800/desired_file.html. You can also test your server by using telnet or nc to connect to your server's port, and typing in the HTTP request manually. ie. nc localhost 9800
Assume a file with any extension can be served (e.g. .html, .txt), but your servers will only be tested with requests for .html files.
You can #define the number of max connections (like in select_server.c); you do not need to dynamically increase the number of connections.
Questions
Imagine you were using your assignment as a basis for a web server you were going to implement into production use. You may consider any kind of application a web server is used on, from a Desktop PC, an ISP providing web services for many customers, all the way to an embedded device with limited resources. You may consider the possible extended features such a device might require (or not require), and you may do a little bit of research on the Internet. There are no right and wrong
answers here, we are looking for answers which demonstrate your understanding of how each implementation works in conjunction with the operating system.

Question 0 What server did you find easiest to implement, and hardest to implement, and why? Describe the challenges you faced in implementing each one.
Question 1 When might it be advantageous (on what type of system) to use the design of server_f instead of server_p, and vice versa? Explain your answer and provide some evidence for your statements.
Question 2 When would it be advantageous (on what type of system) to use the design of server_p instead of server_s, and vice versa? Explain your answer and provide some evidence for your statements.
Marking
This assignment will be marked out of 100 marks.

Your server_f implementation will be worth 30 marks
Your server_p implementation will be worth 30 marks
Your server_s implementation will be worth 25 marks
Your answers to the questions will be worth 15 marks. Please include your name on the top of the document and call the document 'questions.txt'.
Include a README to mention what each of your files does.
Please submit all your files as a tarball called ass2.tar. 
Important: Always remember to remove from your machine the running server daemon(s) before logging off. Generally, make sure there are no stray processes left on your machine before leaving. This kind of negligence and lack of courtesy will be punished with mark deductions.
Deliverables
Your programs must be written exclusively in C. C++ idioms will be penalized. Consistent and readable C coding style is very important to spotting bugs and having your code readable by others. Your coding style should comply with the code style standards documented here. Some (but not all) important highlights from this which will be relevant for you are:

indentation is an 8 space TAB
NO line may be longer than 80 chars.
secondary indentation (for long lines) is four spaces.
Tab should be used in place of all 8 spaces. (i.e. do not indent a block 3 deep with 24 space characters - use three tabs)
all functions are prototyped
all variables are declared at the start of a block
C style comments must be used (not C++ style)
If you find that the 8 space tab and 80 column width means you are constrained and end up with blocks indented to the far right of your screen, that is actually the point of this. If you are nested that deep, either your code logic is getting too complex and you're either barking up the wrong tree, or you should refactor some of it (like putting some stuff into a function, etc. This style may be painful at first but it will make you a better C programmer. At this stage of your CS
education, you are expected to deliver good quality code, which is easy to read and comprehend. The quality of your code will be marked.

You must deliver the code for the three servers, as well as a Makefile to build them all, where the command "make all" will build all three servers.

The answers to the questions must be in a file named "questions.txt" and are limited to an absolute maximum of 500 words as determined by the wc -w command in the lab. Answers longer than 500 words WILL NOT BE MARKED. This means that before you submit "questions.txt" run wc -w questions.txt; if the number you see is bigger than 500, your answers are too long and you need to shorten them.

Advice for assignment:
There are many bad examples of code online, particularly for not scaling in realistic scenarios, e.g. statically allocating fd_sets or assuming that send/recv write/read all the data given to them. Look at the select_server.c and server.c code examples to start your assignments.

***************
